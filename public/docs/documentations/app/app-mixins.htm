
  <!-- Start public/less-sample/app/app-mixins.less -->

<h1 id="mixin-interfaces">Mixin Interfaces</h1>
<h2 id="-fix-float-"><code>.fix-float()</code></h2>
<h3 id="description">Description</h3>
<p>Can be used to wrap around floated elements. Using <code>fix-float</code>, the wrapper
gets a height and stays in the flow of the document.</p>
<h3 id="parameters-none">Parameters: none</h3>
<h3 id="usage">Usage</h3>
<p>  Apply the class to a wrapper div that contains floated elements.</p>
<h3 id="example">Example</h3>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"fix-float"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>floated div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>floated div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>floated div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre>
<hr>
<h2 id="-box-shadow-well-blur-speed-color-"><code>.box-shadow-well([@blur, @speed, @color])</code></h2>
<h3 id="description">Description</h3>
<p>Creats a subtle well region with a small inner shadow.</p>
<h3 id="parameters-">Parameters:</h3>
<p><strong>@blur</strong> (optional) : The amout of shadow blur in pixels or any other valid units.</p>
<p><strong>@speed</strong> (optional) : The amout of shadow speed in pixels or any other valid units.</p>
<p><strong>@color</strong> (optional) : The shadow color in any valid color units.</p>
<h3 id="usage">Usage</h3>
<p>  Can be mixed in with any block-level component. The three parameters are optional.
  It is also possible to use each parameter individually. See examples below.</p>
<h3 id="examples">Examples</h3>
<pre><code><span class="comment">// All the examples below are block-level elements.</span>
<span class="variable">.example1</span>{
  <span class="variable">.box</span>-shadow-well(<span class="number">10</span>px, <span class="number">10</span>px, <span class="preprocessor">#000); // using all the parameters</span>
}

<span class="variable">.example2</span>{
  <span class="variable">.box</span>-shadow-well(); <span class="comment">// Calling without any parameters.</span>
}

<span class="variable">.example3</span>{
  <span class="comment">// Calling with one parameter. </span>
  <span class="comment">// Note that the order of the parameter is not important.</span>
  <span class="variable">.box</span>-shadow-well(@color : <span class="preprocessor">#e5e6e7);</span>
}</code></pre>
<h2 id="-smooth-what-duration-timing-function-"><code>.smooth([@what, @duration, @timing-function])</code></h2>
<h3 id="description">Description</h3>
<p>Used to add CSS3 transition to the specified property.</p>
<h3 id="parameters-">Parameters:</h3>
<ol>
<li><p><strong>@what</strong> (optional)  <em>string or non-string</em> : The CSS property to which we want to add the transition:
The default value is <code>all</code> which applies the transition to all the properties.</p>
</li>
<li><p><strong>@duration</strong> (optional) <em>integer</em> : The duration of the transition. The default value is 200ms.</p>
</li>
<li><p><strong>@timing-function</strong> (optional) <em>string or non-string</em> : A valid timing function for the transition.
The default value is <code>linear</code>.</p>
</li>
</ol>
<h3 id="usage">Usage</h3>
<p>  Can be mixed in with other classes or ids or anywhere. Cannot be called by itself to generate 
  classes or ids.s</p>
<h3 id="examples">Examples</h3>
<pre><code>// Example <span class="keyword">to</span> <span class="keyword">set</span> transition <span class="keyword">for</span> <span class="keyword">the</span> hover state <span class="keyword">of</span> <span class="keyword">the</span> anchor links.
// using all <span class="keyword">the</span> parameters.
a, a:hover{
  .smooth(<span class="string">"color"</span>,<span class="number">250</span>ms, <span class="string">"ease-out"</span>);
}

// Setting transitino <span class="keyword">for</span> <span class="keyword">the</span> background color <span class="keyword">of</span> a box.
.box, .box:hover{
  .smooth(@what: 'background-color');
}</code></pre>
<h2 id="-custom-loop-n-3-base-value-1-unit-property-font-size-selector-fs-step-size-2-"><code>.custom-loop(@n: 3 [, @base-value:1, @unit: &#39;%&#39;, @property:font-size, @selector: ~&quot;.fs-&quot;, @step-size: 2])</code></h2>
<h3 id="description">Description</h3>
<p>General purpose loop for creating repeated selectors containing one property that increments
at a particular value.</p>
<h3 id="parameters-">Parameters:</h3>
<ol>
<li><p><strong>@n</strong>  <em>integer</em>: The number of iterations.</p>
</li>
<li><p><strong>@base-value</strong> (optional) <em>integer</em>: The starting value for the loop to be assigned to the property. Default value is the same is the value assigned for the number of iterations <code>@n</code>.</p>
</li>
<li><p><strong>@unit</strong> (optional) <em>string</em>: The unit for the property. Default value is <code>px</code>.</p>
</li>
<li><p><strong>@property</strong> (optional) <em>non-string</em> or <em>string</em>:  The CSS property. Default value is <code>width</code></p>
</li>
<li><p><strong>@selector</strong> (optional) <em>escaped string</em> : The selector used for the loop. Could be anything as long as it is passed in as a escaped string.</p>
</li>
<li><p><strong>@step-size</strong> (optional) <em>integer</em>: The value by which the loop increments by.</p>
</li>
<li><p><strong>@isReverse</strong> (optional) <em>boolean</em>: If set to true, it will reverse the loop. Default value is false.</p>
</li>
</ol>
<h3 id="usage">Usage</h3>
<p>  The mixin can be called inside the LESS independently.</p>
<h3 id="examples">Examples</h3>
<pre><code><span class="comment">// Using just the required parameter.</span>
.custom-loop(<span class="variable">@n</span>:<span class="number">3</span>);
<span class="comment">//-&gt;</span>
.span-<span class="number">1</span> {
  width: <span class="number">3</span>px;
}
.span-<span class="number">2</span> {
  width: <span class="number">4</span>px;
}
.span-<span class="number">3</span> {
  width: <span class="number">5</span>px;
}

<span class="comment">//Using all the optional Parameters.</span>
.custom-loop( <span class="variable">@n</span>: <span class="number">3</span> , <span class="variable">@base</span>-value:<span class="number">1</span>, <span class="variable">@unit</span>: <span class="string">'%'</span>, <span class="variable">@property</span>:font-<span class="keyword">size</span>, <span class="variable">@selector</span>: ~<span class="string">".fs-"</span>, <span class="variable">@step</span>-<span class="keyword">size</span>: <span class="number">2</span>);
<span class="comment">//-&gt;</span>
.fs-<span class="number">1</span> {
  font-<span class="keyword">size</span>: <span class="number">1</span><span class="variable">%;</span>
}
.fs-<span class="number">2</span> {
  font-<span class="keyword">size</span>: <span class="number">3</span><span class="variable">%;</span>
}
.fs-<span class="number">3</span> {
  font-<span class="keyword">size</span>: <span class="number">5</span><span class="variable">%;</span>
}

<span class="comment">// Using the @isReverse option to create h1 to h3 headings where h1 is the largest value and h3 is the smallest.</span>
.custom-loop( <span class="variable">@n</span>: <span class="number">3</span> , <span class="variable">@base</span>-value:<span class="number">14</span>,  <span class="variable">@property</span>:font-<span class="keyword">size</span>, <span class="variable">@selector</span>: h, <span class="variable">@step</span>-<span class="keyword">size</span>: <span class="number">2</span>, <span class="variable">@isReverse</span>:true);
<span class="comment">//-&gt;</span>
h3 {
  font-<span class="keyword">size</span>: <span class="number">14</span>px;
}
h2 {
  font-<span class="keyword">size</span>: <span class="number">16</span>px;
}
h1 {
  font-<span class="keyword">size</span>: <span class="number">18</span>px;
}</code></pre>
<h2 id="-make-fibo-for-how-many-starting-term-unit-step-size-class-name-property-"><code>.make-fibo-for(@how-many, @starting-term [, @unit, @step-size, @class-name, @property])</code></h2>
<h3 id="description">Description</h3>
<p>Makes font sizes by default based on the fibonacci sequence. You can also target another property
such as width with a custom class.</p>
<h3 id="parameters-">Parameters:</h3>
<p><strong>@how-many</strong> : The number of terms that you need. For example, if you pass in 3 with starting term of
5, you will get 5, 8 ,13.</p>
<p><strong>@starting-term</strong> : The starting term that you want to start the sequence from. If you pass 5,<br>then you will get 5, 8, 13,... for example.</p>
<p><strong>@unit</strong> (optional) : The unit used for the property. By default the unit is <code>px</code>. You can pass in other
units, but make sure to pass in the <code>%</code> unit as a string. That is: <code>.make-fibo-for(@unit: &#39;%&#39;, @how-many: 2 ...);</code></p>
<p><strong>@stepsize</strong> (optional) : is the distance between the generated classes. The default value is one 
which by default produces <code>fs-1, fs-2,...</code>.</p>
<p><strong>@class-name</strong> (optional) : The sequential generated class. By default the class name is <code>fs</code>. You
can pass other names such as my-selector: <code>.make-fibo-for(@class-name: my-selector, ...);</code> 
//-&gt; my-selector-1, my-selector-2, .... </p>
<p><strong>@property</strong> (optional) : The CSS property that you need to target. By default this is set to <code>font-size</code>.
You can target the <code>width</code> property for example: <code>.make-fibo-for(@property : width, @how-many:2, ...);</code>.</p>
<h3 id="usage">Usage</h3>
<p>  You can use this mixin independently in you LESS file and the classes will be generated automatically.</p>
<h3 id="examples">Examples</h3>
<pre><code>// Using the default values <span class="keyword">and</span> just specifying the number of terms <span class="keyword">and</span> the starting term.

<span class="preprocessor">.make</span>-fibo-for( @how-many:<span class="number">5</span> , @starting-term:<span class="number">6</span> )<span class="comment">;</span>
//-&gt;
<span class="preprocessor">.fs</span>-<span class="number">1</span> {
  font-size: <span class="number">8</span>px<span class="comment">;</span>
}
<span class="preprocessor">.fs</span>-<span class="number">2</span> {
  font-size: <span class="number">13</span>px<span class="comment">;</span>
}
<span class="preprocessor">.fs</span>-<span class="number">3</span> {
  font-size: <span class="number">21</span>px<span class="comment">;</span>
}
<span class="preprocessor">.fs</span>-<span class="number">4</span> {
  font-size: <span class="number">34</span>px<span class="comment">;</span>
}
<span class="preprocessor">.fs</span>-<span class="number">5</span> {
  font-size: <span class="number">55</span>px<span class="comment">;</span>
}

// Creating classes for the width property with custom class names <span class="keyword">and</span> custom unit.

<span class="preprocessor">.make</span>-fibo-for( @how-many:<span class="number">5</span> , @starting-term:<span class="number">6</span> , @unit:<span class="string">'%'</span>, @property : width, @class-name : mygrid)<span class="comment">;</span>

<span class="preprocessor">.mygrid</span>-<span class="number">1</span> {
  width: <span class="number">8</span>%<span class="comment">;</span>
}
<span class="preprocessor">.mygrid</span>-<span class="number">2</span> {
  width: <span class="number">13</span>%<span class="comment">;</span>
}
<span class="preprocessor">.mygrid</span>-<span class="number">3</span> {
  width: <span class="number">21</span>%<span class="comment">;</span>
}
<span class="preprocessor">.mygrid</span>-<span class="number">4</span> {
  width: <span class="number">34</span>%<span class="comment">;</span>
}
<span class="preprocessor">.mygrid</span>-<span class="number">5</span> {
  width: <span class="number">55</span>%<span class="comment">;</span>
}

// using custom selectors
<span class="preprocessor">.make</span>-fibo-for( @how-many:<span class="number">5</span> , @starting-term:<span class="number">6</span> , @unit:<span class="string">'%'</span>, @property : width, @class-name : ~<span class="string">"gs .fs-"</span>)<span class="comment">;</span>
//-&gt;
<span class="preprocessor">.gs</span> <span class="preprocessor">.fs</span>-<span class="number">1</span> {
  width: <span class="number">8</span>%<span class="comment">;</span>
}
<span class="preprocessor">.gs</span> <span class="preprocessor">.fs</span>-<span class="number">2</span> {
  width: <span class="number">13</span>%<span class="comment">;</span>
}
<span class="preprocessor">.gs</span> <span class="preprocessor">.fs</span>-<span class="number">3</span> {
  width: <span class="number">21</span>%<span class="comment">;</span>
}
<span class="preprocessor">.gs</span> <span class="preprocessor">.fs</span>-<span class="number">4</span> {
  width: <span class="number">34</span>%<span class="comment">;</span>
}
<span class="preprocessor">.gs</span> <span class="preprocessor">.fs</span>-<span class="number">5</span> {
  width: <span class="number">55</span>%<span class="comment">;</span>
}</code></pre>
<!-- End public/less-sample/app/app-mixins.less -->


