<!-- Start ../src/action.js -->

<h2 id="action-wrapper">Action Wrapper</h2>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 11/4/2014</li>
<li>Description: The Action Wrapper</li>
</ul>
<h2 id="program">program</h2>
<h2 id="-action-wrapper-"><code>Action Wrapper</code></h2>
<h3 id="description">Description</h3>
<p>Simple wrapper for the commander program object. Acts as an API and can be used for creating custom actions.</p>
<h3 id="methods-">Methods:</h3>
<ol>
<li><strong>add</strong> : Used to add/register tasks/actions.</li>
</ol>
<h2 id="add-">add()</h2>
<h2 id="-add-options-callback-"><code>add(options, callback)</code></h2>
<h3 id="description">Description</h3>
<p>Adds/creates tasks on the commander module/program.</p>
<h3 id="parameters-">Parameters:</h3>
<ol>
<li><p><strong>options</strong> : <em>object</em> The configuration object that contains the following:</p>
<ul>
<li>name: <em>string</em> (required): The name of the task/action/keyword</li>
<li>arg: <em>string</em> The argument that refers to the the value that is immediately followed by the keyword/action.</li>
<li>params: <em>string</em> The argument that refers to the array of arguments followed by the <code>arg</code> argument.</li>
<li>description: <em>string</em> The action/task description.</li>
</ul>
</li>
<li><p><strong>callback</strong> : <em>function</em> The function that does the heavy lifting. This callback takes three parameters:</p>
<ul>
<li>[data]: the first parameter references the tasks/program object.</li>
<li>[arg]: the second parameter refers to the argument that is followed by the keyword/task name.</li>
<li>[params]: the third argument references the array of arguments passed after the <code>arg</code>.</li>
</ul>
</li>
</ol>
<h3 id="usage">Usage</h3>
<p>  You can use the add method to register tasks or commands with a keyword and a parameter. Then pass it a callback to do whatever you like to do.</p>
<h3 id="examples">Examples</h3>
<p>  Example1: Creating/adding a command that prints &quot;Salute [name]&quot; given a string</p>
<pre><code>var action = require(<span class="string">"./action"</span>)<span class="comment">;</span>
action<span class="preprocessor">.add</span>({name: <span class="string">"hello"</span>, arg: <span class="string">"name"</span>}, function(d, name) {
    console<span class="preprocessor">.log</span>(<span class="string">"Salute "</span> + name)<span class="comment">;</span>
})<span class="comment">;</span>

<span class="label">use:</span> hdstream hello amino -&gt; Salute amino</code></pre>
<p>   Example 2: Create/add a command/action that prints a list of names, and name it helloall</p>
<pre><code>var action = require(<span class="string">"./action"</span>);
action.add({<span class="property">name</span>: <span class="string">"helloall"</span>, arg: <span class="string">"dummy"</span>, params: <span class="string">"names"</span>}, function(d, what, nms) {
nms.forEach(function(n) {
    console.<span class="command">log</span>(<span class="string">"hello "</span> + n);
});

// note: we need <span class="keyword">the</span> dummy placeholder <span class="keyword">for</span> <span class="keyword">the</span> correct parsing <span class="keyword">of</span> <span class="keyword">the</span> parameters. Limitation <span class="keyword">of</span> <span class="keyword">the</span> underlying module.

use: hdstream helloall x n1 n2 n3 //-&gt; hello n1 \n hello n2 \n hello n3</code></pre>
<!-- End ../src/action.js -->




<!-- Start ../src/actions/capture/capture.js -->

<h1 id="actions-tester">actions/tester</h1>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 10/12/2014</li>
<li>Description: Tester Action</li>
</ul>
<h2 id="jf">jf</h2>
<h2 id="modules">Modules</h2>
<ul>
<li><strong>jsonfile</strong>: For reading json file.</li>
<li><strong>inquirer</strong>: Creates friendly command line interface input.</li>
<li><strong>hdlogger</strong>: helper for printing help message (internal).</li>
<li><strong>snap</strong>: Handles taking screenshots.</li>
</ul>
<!-- End ../src/actions/capture/capture.js -->




<!-- Start ../src/actions/capture/snap.js -->

<h1 id="actions-capture-snap">actions/capture/snap</h1>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 10/12/2014</li>
<li>Description: Low level implementation for taking snapshots.</li>
</ul>
<h2 id="spooky">Spooky</h2>
<h2 id="modules">Modules</h2>
<ul>
<li><strong>spooky</strong>: Driver for casperjs inside the Node env.</li>
</ul>
<!-- End ../src/actions/capture/snap.js -->




<!-- Start ../src/actions/hello.js -->

<!-- End ../src/actions/hello.js -->




<!-- Start ../src/actions/scaffold.js -->

<!-- End ../src/actions/scaffold.js -->




<!-- Start ../src/actions/serve.js -->

<h2 id="actions-serve">actions/serve</h2>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 11/4/2014</li>
<li>Description: Responsible for starting a simple static http server.</li>
</ul>
<h2 id="-run-"><code>run</code></h2>
<h3 id="description">Description</h3>
<p>Runs the action.</p>
<h3 id="params-">Params:</h3>
<ol>
<li><strong>questions</strong> : Questions configuration used to ask user input.</li>
</ol>
<h2 id="http">http</h2>
<p>hint:
    current directory: whereever it is you are in the terminal currently.
    directory from which the code is running from: node_modules/hdmade/src/actions</p>
<!-- End ../src/actions/serve.js -->




<!-- Start ../src/actions/theme.js -->

<h2 id="actions-theme">actions/theme</h2>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 11/4/2014</li>
<li>Description: Responsible for scaffolding themes.</li>
</ul>
<h2 id="inquirer">inquirer</h2>
<h2 id="-run-"><code>run</code></h2>
<h3 id="description">Description</h3>
<p>Runs the action.</p>
<h3 id="params-">Params:</h3>
<ol>
<li><strong>questions</strong> : Questions configuration used to ask user input.</li>
</ol>
<!-- End ../src/actions/theme.js -->




<!-- Start ../src/config.js -->

<h2 id="pkg">pkg</h2>
<p>Application Settings</p>
<!-- End ../src/config.js -->




<!-- Start ../src/hdmade.js -->

<h1 id="hd-stream-cli-v-0-2-0">HD|Stream-Cli v 0.2.0</h1>
<ul>
<li>Author: Amin Meyghani</li>
<li>Date: 11/3/2014</li>
<li>Description: The HDStream-cli</li>
</ul>
<h2 id="__base">__base</h2>
<h2 id="modules">Modules</h2>
<ul>
<li><strong>fs-extra</strong>: standard file system operation with addition to the built-in fs.</li>
<li><strong>commander</strong>: deals with reading command line arguments.</li>
<li><strong>hdlogger</strong>: helper for printing help message (internal).</li>
<li><strong>config</strong>: The cli configuration and settings (internal).</li>
<li><strong>serve</strong>: The server action/task (internal).</li>
</ul>
<h2 id="globals">globals</h2>
<ul>
<li><strong>__base</strong>: The path to the main file. &quot;absolutepath/src/&quot;</li>
</ul>
<h2 id="-hdstream-serve-"><code>hdstream serve</code></h2>
<h3 id="description">Description</h3>
<p>Used to serve static files with a basic http server</p>
<h3 id="usage">Usage</h3>
<p>  Simply do <code>hdstream serve</code> and then you will be prompted to put in values:</p>
<ul>
<li>first: The port number: use a value between 8000 and 9000</li>
<li>second: The directory to serve the files from. You could just drag and drop the folder that you want to serve and hit enter.</li>
</ul>
<h2 id="-hdstream-s-directory-p-port-"><code>hdstream s &lt;directory&gt; -p &lt;port&gt;</code></h2>
<h3 id="description">Description</h3>
<p>Used to serve static files with a basic http server</p>
<h3 id="parameters-">Parameters:</h3>
<ol>
<li><strong>directory</strong> : <em>string</em> (required) The directory to be served.</li>
<li><strong>port</strong> : <em>int</em> The port number. Default: 8228</li>
</ol>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream s path/to/serve -p portvalue</code></p>
<h3 id="examples">Examples</h3>
<p>  Example 1: Serve current folder at 9000</p>
<pre><code><span class="comment">hdstream</span> <span class="comment">s</span> <span class="string">.</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">9000</code></pre>
<p>  Example 2: Serve ./main/public at 9000</p>
<pre><code><span class="comment">hdstream</span> <span class="comment">s</span> <span class="string">.</span><span class="comment">/main/public</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">9000</code></pre>
<h2 id="-hdstream-theme-"><code>hdstream theme</code></h2>
<h3 id="description">Description</h3>
<p>Used for creating starter themes for wordpress or drupal.</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream theme</code> and it will take you through the process.</p>
<h2 id="-hdstream-test-"><code>hdstream test</code></h2>
<h3 id="description">Description</h3>
<p>Used for responsive/cross-browser testing</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream test</code> and then the prompt will take you through the process:</p>
<pre><code>    <span class="number">0.</span> Select <span class="keyword">the</span> type <span class="keyword">of</span> test <span class="keyword">that</span> you want <span class="keyword">to</span> do
    <span class="number">1.</span> Specify <span class="keyword">the</span> base url <span class="keyword">of</span> <span class="keyword">the</span> site: eg. http://markle.org
    <span class="number">2.</span> Specify <span class="keyword">the</span> <span class="keyword">end</span> paths separated <span class="keyword">by</span> commas: <span class="keyword">about</span>.php, impact.php
    <span class="number">3.</span> Specify <span class="keyword">the</span> viewports <span class="keyword">that</span> you want <span class="keyword">to</span> take <span class="keyword">the</span> snapshots <span class="keyword">of</span> separated <span class="keyword">by</span> commas: <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span></code></pre>
<h2 id="-hdstream-t-k-test-type-s-settings-file-"><code>hdstream t -k &lt;test type&gt; -s &lt;settings-file&gt;</code></h2>
<h3 id="description">Description</h3>
<p>Used to do responsive or cross browser testing without prompt</p>
<h3 id="parameters-">Parameters:</h3>
<ol>
<li><strong>k</strong> : <em>string</em> (required) Type of test. Possible options are: responsive(r), cross_browser(c)</li>
<li><p><strong>s</strong> : <em>string</em> The path to the settings.json file that has the options. Below is an example of the json settings file:</p>
<pre><code> {
     "<span class="attribute">baseUrl</span>" : <span class="value"><span class="string">"http://markle.local.com"</span></span>,
     "<span class="attribute">paths</span>": <span class="value">[<span class="string">"mkl-impact.php"</span>, <span class="string">"mkl-about.php"</span>]</span>,
     "<span class="attribute">viewports</span>" : <span class="value">[<span class="number">400</span>, <span class="number">500</span>]
 }</span></code></pre>
</li>
</ol>
<h2 id="-hdstream-help-"><code>hdstream help</code></h2>
<h3 id="description">Description</h3>
<p>Prints a summary of options and commands that are available.</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream help</code></p>
<h2 id="-hdstream-docs-"><code>hdstream docs</code></h2>
<h3 id="description">Description</h3>
<p>Prints a more detailed documentation for all the tasks and options that are available.</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream docs</code></p>
<h2 id="-hdstream-docsfor-command-name-"><code>hdstream docsfor &lt;command-name&gt;</code></h2>
<h3 id="description">Description</h3>
<p>Prints the docs for a given command.</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream docsfor nameofcommand</code></p>
<h2 id="-hdstream-scaffold-arg-params-"><code>hdstream scaffold &lt;arg&gt; &lt;params...&gt;</code></h2>
<h3 id="description">Description</h3>
<p>Example for a task that uses all the possible options and keywords. You can refer to this as an example to remember what the possible options are.</p>
<h3 id="usage">Usage</h3>
<p>  Just do <code>hdstream scaffold</code></p>
<h2 id="-hdstream-invalidcommand-"><code>hdstream invalidcommand</code></h2>
<h3 id="description">Description</h3>
<p>Catches invalid commands. Prints help if the command entered is not valid.</p>
<!-- End ../src/hdmade.js -->




<!-- Start ../src/lib/hdlogger.js -->

<ul>
<li><p>Author: Amin Meyghani</p>
<ul>
<li>Date: 09/29/2014</li>
<li><p>Description: Helper for logging to the console.</p>
<h3 id="modules">Modules</h3>
</li>
</ul>
</li>
<li><strong>colors</strong>: add colors to the console output.</li>
<li><strong>chalk</strong>: pretty printing to the console.</li>
</ul>
<!-- End ../src/lib/hdlogger.js -->




<!-- Start ../src/lib/hdserver.js -->

<p>Author: Amin Meyghani
    Date: 09/30/2014
    Description: 
        Simple web server for running tests or taking screenshots.</p>
<p>Useful for logging information:
            server.address()
            server.address().address
            server.address().port</p>
<!-- End ../src/lib/hdserver.js -->


